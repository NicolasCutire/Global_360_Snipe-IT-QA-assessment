using Microsoft.Playwright;
using System.Text.RegularExpressions;
using NUnit.Framework;
using FluentAssertions;
using SnipeItQAAssessment.Pages;
using SnipeItQAAssessment.Configuration;
// using SnipeItQAAssessment.Utilities; // not needed after removing name generation
using Serilog;

namespace SnipeItQAAssessment.Tests;

[TestFixture]
public class SnipeItAssetCreationTest
{
    private IPlaywright _playwright = null!;
    private IBrowser _browser = null!;
    private IPage _page = null!;
    
    private LoginPage _loginPage = null!;
    private AssetsPage _assetsPage = null!;
    private CreateAssetPage _createAssetPage = null!;
    private AssetDetailsPage _assetDetailsPage = null!;
    
    private string _assetTag = null!;
    private string _assignedUser = null!;
    
    [SetUp]
    public async Task Setup()
    {
        // Configure logging
        Log.Logger = new LoggerConfiguration()
            .WriteTo.Console()
            .CreateLogger();
            
        Log.Information("Starting test setup...");
        
        // Initialize Playwright
        _playwright = await Playwright.CreateAsync();
        _browser = await _playwright.Chromium.LaunchAsync(new BrowserTypeLaunchOptions
        {
            Headless = false, // Set to true for headless mode
            SlowMo = 1000 // Slow down operations for better visibility
        });
        
        _page = await _browser.NewPageAsync();
        
        // Initialize page objects
        _loginPage = new LoginPage(_page);
        _assetsPage = new AssetsPage(_page);
        _createAssetPage = new CreateAssetPage(_page);
        _assetDetailsPage = new AssetDetailsPage(_page);
        
        // Generate test data
        _assetTag = string.Empty; // Will be read from the form (auto-generated)
        _assignedUser = string.Empty; // Will be selected from the dropdown
        
        Log.Information("Test data generated - Tag will be read from form");
    }
    
    [TearDown]
    public async Task TearDown()
    {
        Log.Information("Cleaning up test...");
        
        if (_page != null)
        {
            await _page.CloseAsync();
        }
        
        if (_browser != null)
        {
            await _browser.CloseAsync();
        }
        
        if (_playwright != null)
        {
            _playwright.Dispose();
        }
        
        Log.CloseAndFlush();
    }
    
    [Test]
    public async Task CreateAndVerifyMacBookProAsset()
    {
        Log.Information("Starting Snipe-IT Asset Creation Test");
        
        try
        {
            // Step 1: Login to Snipe-IT demo
            Log.Information("Step 1: Logging into Snipe-IT demo...");
            await _loginPage.NavigateToLoginPage();
            await _loginPage.LoginAsync(TestConfiguration.DemoUsername, TestConfiguration.DemoPassword);
            
            var isLoginSuccessful = await _loginPage.IsLoginSuccessful();
            isLoginSuccessful.Should().BeTrue("Login should be successful");
            Log.Information("âœ“ Login successful");
            
            // Step 2: Navigate to assets page and create new asset
            Log.Information("Step 2: Navigating to assets page...");
            await _assetsPage.NavigateToAssetsPage();
            await _assetsPage.ClickCreateAsset();
            Log.Information("âœ“ Navigated to create asset page");
            
            // Step 3: Fill asset creation form
            Log.Information("Step 3: Filling asset creation form...");
            // Asset name is not required in demo; asset tag is auto-generated by the page
            // Read the auto-generated tag from the form for later verification
            _assetTag = await _createAssetPage.GetAssetTagFromForm();
            
            // Select MacBook Pro 13" model (assuming it exists in demo data)
            await _createAssetPage.SelectModel(TestConfiguration.MacBookProModel);
            
            // Select "Ready to Deploy" status
            await _createAssetPage.SelectStatus(TestConfiguration.ReadyToDeployStatus);
            
            // Assign to a random user from the dropdown and capture the chosen name
            _assignedUser = await _createAssetPage.SelectRandomAssignedUser();
            
            Log.Information($"âœ“ Asset form filled - Tag: {_assetTag}");
            
            // Step 4: Save the asset
            Log.Information("Step 4: Saving asset...");
            await _createAssetPage.SaveAsset();
            
            var isAssetCreated = await _createAssetPage.IsAssetCreatedSuccessfully();
            isAssetCreated.Should().BeTrue("Asset should be created successfully");
            Log.Information("âœ“ Asset created successfully");
            
            // Step 5: Verify asset in assets list
            Log.Information("Step 5: Verifying asset in assets list...");
            await _assetsPage.NavigateToAssetsPage();
            
            var isAssetInList = await _assetsPage.IsAssetInList(_assetTag);
            isAssetInList.Should().BeTrue($"Asset with tag '{_assetTag}' should be visible in the assets list");
            Log.Information("âœ“ Asset found in assets list");
            
            // Skip list status check; we'll validate status on the asset details page
            
            // Step 6: Navigate to asset details page
            Log.Information("Step 6: Navigating to asset details page...");
            await _assetsPage.ClickAssetLink(_assetTag);
            
            var isDetailsVisible = await _assetDetailsPage.IsAssetDetailsVisible();
            isDetailsVisible.Should().BeTrue("Asset details page should be visible");
            Log.Information("âœ“ Asset details page loaded");
            
            // Step 7: Validate asset details
            Log.Information("Step 7: Validating asset details...");
            var detailsAssetTag = await _assetDetailsPage.GetAssetTag();
            var detailsAssetModel = await _assetDetailsPage.GetAssetModel();
            var detailsAssetStatus = await _assetDetailsPage.GetAssetStatus();
            var detailsAssignedTo = await _assetDetailsPage.GetAssignedTo();

            detailsAssetTag.Should().Contain(_assetTag, "Asset tag should match");
            detailsAssetModel.Should().ContainEquivalentOf(TestConfiguration.MacBookProModel, "Asset model should match (case-insensitive)");
            detailsAssetStatus.Should().ContainEquivalentOf(TestConfiguration.ReadyToDeployStatus, "Asset status should match (case-insensitive)");

            string Normalize(string s) => Regex.Replace(s ?? string.Empty, "\\s+", " ").Trim().ToLowerInvariant();
            Normalize(detailsAssignedTo).Should().Contain(Normalize(_assignedUser), "Assigned user should match (case/whitespace-insensitive)");
            
            Log.Information($"âœ“ Asset details validated - Tag: {detailsAssetTag}, Model: {detailsAssetModel}, Status: {detailsAssetStatus}, Assigned: {detailsAssignedTo}");
            
            // Step 8: Validate History tab
            Log.Information("Step 8: Validating History tab...");
            await _assetDetailsPage.ClickHistoryTab();
            
            var isHistoryVisible = await _assetDetailsPage.IsHistoryTabVisible();
            isHistoryVisible.Should().BeTrue("History tab should be visible");
            
            var historyEntries = await _assetDetailsPage.GetHistoryEntries();
            historyEntries.Should().NotBeEmpty("History should contain entries");
            
            Log.Information($"âœ“ History tab validated - Found {historyEntries.Count} history entries");
            
            // Log history entries for verification
            foreach (var entry in historyEntries.Take(5)) // Show first 5 entries
            {
                Log.Information($"  - {entry}");
            }
            
            Log.Information("ðŸŽ‰ All test steps completed successfully!");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Test failed with exception");
            throw;
        }
    }
}
